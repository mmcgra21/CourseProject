d <- df[1]
View(d)
d <- df[[1]]
rm(d)
table(df)
table(new_df)
colMeans(new_df)
colMeans(df)
class(df[1])
class(df[2])
class(df[3])
class(df[[3]])
class(df[[1]])
class(df[[2]])
for (i in 1:length(names(df))) {print(class(df[[i]]))}
length(df)
colMeans(df[3:length(df)])
class(colMeans(df[3:length(df)]))
as.data.frame(colMeans(df[3:length(df)]))
df2 <- as.data.frame(colMeans(df[3:length(df)]))
View(df2)
rm(new_df)
rm(df2)
df2 <- group_by(df, subject_id, activity_label)
View(df2)
summary(df2)
class(df2)
group_map(df2)
df2 <- group_by(df, c(subject_id, activity_label))
df2 <- group_by(df, subject_id, activity_label)
summarize(df2)
summary(df2)
summarise(df2)
summarise(df2, mean)
summarise(df2, mean())
summarise(df2, mean(df2))
summarise(df2, mean = mean(df2))
summarise(df2, mean = mean(df2[3:length(names(df2))]))
warnings()
summarise(df2, mean = mean(timeBodyAccelerometerMeanXaxis))
summarise(df2, mean = mean(feature_names))
summarise(df2, mean = mean(3:5))
summarise(df2, mean = mean(df2[feature_names]))
summarise_all(df2, mean)
View(df)
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt")),
activityLabel = c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt")),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize function in the dplyr library to summarize
## the means of the data based on their groups created in the previous line.
df_means <- summarise_all(df, mean)
View(df_means)
?arrange
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt")),
activityLabel = c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt")),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize_all function in the dplyr library to
## summarize the means of all data columns based on their groups created in the
## previous line of code (I also sorted them to make the data more appealing).
df_means <- arrange(summarise_all(df, mean), subjectId, activityId)
## Since there are 30 subjects and 6 activities, we expect the df_means
## dataframe to have 30 x 6 = 180 rows.
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt")),
activityLabel = c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt")),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize_all function in the dplyr library to
## summarize the means of all data columns based on their groups created in the
## previous line of code (I also sorted them to make the data more appealing).
df_means <- arrange(summarise_all(df, mean), subjectId, activityLabel)
## Since there are 30 subjects and 6 activities, we expect the df_means
## dataframe to have 30 x 6 = 180 rows.
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = as.numeric(c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt"))),
activityLabel = as.numeric(c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt"))),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize_all function in the dplyr library to
## summarize the means of all data columns based on their groups created in the
## previous line of code (I also sorted them to make the data more appealing).
df_means <- arrange(summarise_all(df, mean), subjectId, activityLabel)
## Since there are 30 subjects and 6 activities, we expect the df_means
## dataframe to have 30 x 6 = 180 rows.
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = as.numeric(c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt"))),
activityLabel = as.numeric(c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt"))),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index)
arrange(subjectId, activityLabel)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize_all function in the dplyr library to
## summarize the means of all data columns based on their groups created in the
## previous line of code (I also sorted them to make the data more appealing).
df_means <- arrange(summarise_all(df, mean), subjectId, activityLabel)
## Since there are 30 subjects and 6 activities, we expect the df_means
## dataframe to have 30 x 6 = 180 rows.
View(df)
## Make sure the following packages are installed.
library(dplyr)
library(tidyr)
## Download the zip file and open in working directory.
## Now we load the data into a dataframe, combining the training and test sets.
## The training set is held in the txt file: "UCI HAR Dataset/train/X_train.txt"
## The test set is held in the txt file: "UCI HAR Dataset/test/X_test.txt"
df <- data.frame(subjectId = as.numeric(c(readLines("UCI HAR Dataset/train/subject_train.txt"), readLines("UCI HAR Dataset/test/subject_test.txt"))),
activityLabel = as.numeric(c(readLines("UCI HAR Dataset/train/Y_train.txt"), readLines("UCI HAR Dataset/test/Y_test.txt"))),
data = c(readLines("UCI HAR Dataset/train/X_train.txt"), readLines("UCI HAR Dataset/test/X_test.txt"))
)
## The "data" column has all the 561 features of the variables measured from
## the subject (labeled in the "subject_id" column), while he/she was doing the
## given activity (labeled in the "activity_label" column).
## We can now format the data column, such that each row is a numeric vector
## that contains the 561 measurements.
df <- mutate(df, data = lapply(lapply(strsplit(df$data, " "), as.numeric), function(x) {x[!is.na(x)]}))
## Now we need to extract only the measurements on the mean and standard
## deviation for each measurement.
## We start by reading all 561 features given in "features.txt".
features <- unlist(lapply(readLines("UCI HAR Dataset/features.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
## We can find all variables we want using grep function to grab all the features
## that have "mean()" or "std()" function names in them.
feature_indices <- sort(c(grep("mean[^Freq]()", features), grep("std()", features)))
feature_names <- features[feature_indices]
feature_names <- unlist(lapply(feature_names,
function(x) {
x <- sub("mean\\(\\)", "Mean", x)
x <- sub("std\\(\\)", "StandardDevation", x)
x <- sub("^t", "time", x)
x <- sub("^f", "frequency", x)
x <- sub("Acc", "Accelerometer", x)
x <- sub("Gyro", "Gyroscope", x)
x <- sub("Mag", "Magnitude", x)
x <- sub("X$", "Xaxis", x)
x <- sub("Y$", "Yaxis", x)
x <- sub("Z$", "Zaxis", x)
x <- gsub("-", "", x)
}
)
)
## Now we are ready to start extracting the desired measurements.
## First we update each row of the data column such that only the desired
## measurements are present.
df <- mutate(df, data = lapply(df$data, function(x) {x[feature_indices]}))
## Now we can spread the dataframe, such that, each feature in a data vector has
## its own column with a proper and descriptive title.
df$index <- 1:nrow(df)
df <- df %>%
unnest(data) %>%
group_by(index) %>%
mutate(key = row_number()) %>%
spread(key, data) %>%
ungroup() %>%
select(-index) %>%
arrange(subjectId, activityLabel)
names(df)[3:length(names(df))] <- feature_names
## Now that we are finished with our first tidy dataset, we can use it to create
## our second one.  We want a dataset that takes the average of each column in
## first dataset, with respect to each subject and activity.
## To do so we first must group the original tidy dataset by subjectId and then
## activity label.
df <- group_by(df, subjectId, activityLabel)
## Now we can just use the summarize_all function in the dplyr library to
## summarize the means of all data columns based on their groups created in the
## previous line of code (I also sorted them to make the data more appealing).
df_means <- arrange(summarise_all(df, mean), subjectId, activityLabel)
## Since there are 30 subjects and 6 activities, we expect the df_means
## dataframe to have 30 x 6 = 180 rows.
source(run_analysis.R)
source("run_analysis.R")
names(df)
installed.packages("dplyr")
install.packages("dplyr")
installed.packages("the")
installed.packages("e")
installed.packages()
package_version("dplyr")
package_version(dplyr)
readLines("UCI HAR Dataset/activity_labels.txt")
activities <- unlist(lapply(readLines("UCI HAR Dataset/activity_labels.txt"), function(x) {strsplit(x, " ")[[1]][2]}))
activities
?tolower
activities <- unlist(lapply(readLines("UCI HAR Dataset/activity_labels.txt"), function(x) {tolower(strsplit(x, " ")[[1]][2]})))
activities <- unlist(lapply(readLines("UCI HAR Dataset/activity_labels.txt"), function(x) {tolower(strsplit(x, " ")[[1]][2])}))
activiteis
activities
class(df$activityLabel)
df$activityLabel
for (i in length(df$activityLabel)) {
df$activityLabel[i] <- activities[df$activityLabel[i]]
}
df$activityLabel[1]
df$activityLabel[1] <- activities[df$activityLabel[i]]
source("run_analysis.R")
activities <- unlist(lapply(readLines("UCI HAR Dataset/activity_labels.txt"), function(x) {tolower(strsplit(x, " ")[[1]][2])}))
activities[1]
df$subjectId[1]
class(df$subjectId[1])
activities[df$subjectId[1]]
df$subjectId[1] <- "walk"
source("run_analysis.R")
source("run_analysis.R")
names(df)
source("run_analysis.R")
names(df)
View(df)
source("run_analysis.R")
names(df)
write.csv(df,"df.csv", row.names = FALSE)
write.csv(df,"df_means.csv", row.names = FALSE)
write.csv(df_means,"df_means.csv", row.names = FALSE)
df <- read.csv("df.csv")
df_means <- read.csv("df_means.csv")
View(df)
View(df_means)
View(df)
source("run_analysis.R")
check <- read.table("df_means.txt")
View(check)
check <- read.table("df_means.txt", row.names = FALSE)
check <- read.table("df_means.txt", col.names = TRUE)
check <- read.table("df_means.txt", header=TRUE)
check == df_means
(check == df_means)
View(df_means)
